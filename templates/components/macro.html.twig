{% macro consumables(id, itemtype) %}
    {% set allConsumables = call('GlpiPlugin\\Fillglpi\\ConsumableExt::getConsumablesAndItemTypes', ['GlpiPlugin\\Fillglpi\\Limpeza']) %}
    {% set consumablesByItem = call(
        'GlpiPlugin\\Fillglpi\\ConsumableExt::getUsedConsumablesByItemType',
        [
            itemtype,
            id
        ]
    ) %}

    <label for="lista_tipo" class="form-label">Tipo:</label>
    <select name="lista_tipo" id="lista_tipo" class="form-select"></select>

    <div class="row">
        <div class="col">
            <label for="lista_insumos" class="form-label mt-2">Insumo:</label>
            <select name="lista_insumos" id="lista_insumos" class="form-select"></select>  
        </div>
        <div class="col-4">
            <label for="quantidade_insumos" class="form-label mt-2">Quantidade:</label>
            <select name="quantidade_insumos" id="quantidade_insumos" class="form-select"></select> 
        </div>
    </div>   

    <button class="mt-3 btn" type="button" id="btn_add_consumable">Adicionar insumo</button>

    <div class="mt-3 border d-flex flex-wrap rounded" id="consumablesItems" style="min-height: 40px"></div>
    <input id="consumables" name="consumables" readonly style="display: none"></input>

    <script type="text/javascript"> 
        var usedConsumable = Object.values({{ consumablesByItem|raw }});       
        var dataConsumables = {{ allConsumables|raw }};
        var activeConsumableType = [];
        var listConsumables; 
        var consumableInput = $('#consumables'); 
        const inputQntd = $('#quantidade_insumos');               
        
        function addConsumableTypesOptions() {
            $('#lista_tipo').empty();                                    

            dataConsumables.forEach(function (data) {                        
                var option = $('<option>', {
                    value: data.id,
                    text: data.name
                });
                $('#lista_tipo').append(option);                                                   
            });
            addConsumablesOptions(); 
        }        

        function addConsumablesOptions() {             
            $('#lista_insumos').empty();
            inputQntd.empty();                     

            dataConsumables.forEach(function (data) {
                if ((data.id == $("#lista_tipo").val()) && (data.consumables)) {
                    data.consumables.forEach(function (consumable) {
                        var option = $('<option>', {
                            value: consumable.id,
                            text: consumable.name
                        });

                        $('#lista_insumos').append(option); 
                    });
                }
            });

            activeConsumableType = getActiveConsumableType();
            listConsumables = activeConsumableType.consumables;
            alterStockConsumables(); 
        } 

        function alterStockConsumables() {
            const consumable = listConsumables.find(function(item) {
                return item.id == $("#lista_insumos").val();
            });                     

            if (consumable) {
                var quantidade = 0;

                consumable.amount.forEach(function(item) {
                    if (item.date_out == null) {
                        quantidade++;
                    }
                });

                inputQntd.empty(); 
            
                if (quantidade == 0) {
                    $("#btn_add_consumable").attr("disabled", true);
                } else {
                    $("#btn_add_consumable").attr("disabled", false);
                    for (var i = 1; i <= quantidade; i++) {
                        var optionQuantidade = $('<option>', {
                            value: i,
                            text: i
                        });

                        inputQntd.append(optionQuantidade);
                    }    
                }
            } 
        }
        
        $('#btn_add_consumable').click(function() {
            var selectedItems = $('#lista_insumos').val();

            let consumable = listConsumables.find(function(item) {
                return item.id == $("#lista_insumos").val();
            });           

            for (var i = 0; i < $("#quantidade_insumos").val(); i++) {
                for (var k = 0; k < consumable.amount.length; k++) {
                    if ((consumable.amount[k].date_out == null)) {
                        consumableInput.val(consumableInput.val() + consumable.amount[k].id + ";");
                        $('#consumablesItems').append('<span class="selected-item border rounded-pill px-2 py-1 m-2" data-value="' + consumable.amount[k].id + '" style="cursor: pointer"><span class="selected-item-remove">' + $('#lista_insumos option[value="' + selectedItems + '"]').text() + '  <i class="fas fa-xmark"></i></span></span>');
                        consumable.amount[k].date_out = new Date().toLocaleDateString();
                        break;
                    } 
                }                               
            }            

            alterStockConsumables();
        });

        $(document).on('click', '.selected-item-remove', function() {
            var valueToRemove = $(this).parent().attr('data-value');
            var valueInput = $('#consumables').val();

            var valuesSelected = valueInput.split(";");
            var index = valuesSelected.indexOf(valueToRemove);

            for (var i = 0; i < dataConsumables.length; i++) {
                var itemtype = dataConsumables[i];
                var consumable;

                for (var j = 0; j < itemtype.consumables.length; j++) {
                    var item = itemtype.consumables[j];                    
                    for (var k = 0; k < item.amount.length; k++) {
                        var consumableItem = item.amount[k];
                        if (consumableItem.id == valueToRemove) {
                            consumableItem.date_out = null;
                            consumable = item;
                            break; 
                        }
                    }                    
                }

                if (consumable) {
                    break; 
                }
            }            

            if (index !== -1) {
                valuesSelected.splice(index, 1);
            }

            $('#consumables').val(valuesSelected.join(";"));

            $('#lista_insumos option[value="' + valueToRemove + '"]').prop('selected', false);
            $(this).parent().remove();         

            alterStockConsumables();
        });

        $("#lista_tipo").on("change", function() {
            addConsumablesOptions();            
        });  

        $("#lista_insumos").on("change", function() {
            alterStockConsumables();
        });  

        function getActiveConsumableType() { 
            const id = $("#lista_tipo").val();       
            for (var i = 0; i < dataConsumables.length; i++) {
                if (parseInt(dataConsumables[i].id) === parseInt(id)) {
                    return dataConsumables[i];
                }                 
            }
            return null; 
        }  

        $(document).ready(function () {                
            addConsumableTypesOptions();            

            usedConsumable.forEach(function(used) { 
                used.consumables.forEach(function(cons) {
                    cons.amount.forEach(function(item) {
                        consumableInput.val(consumableInput.val() + item.id + ";");
                        $('#consumablesItems').append('<span class="selected-item border rounded-pill px-2 py-1 m-2" data-value="' + item.id + '" style="cursor: pointer"><span class="selected-item-remove">' + cons.name + '  <i class="fas fa-xmark"></i></span></span>');
                    });
                });                 
            });
        });

    </script>

{% endmacro %}

{% macro inputText(name, label, value = '') %}
    <label for="{{ name }}" class="form-label">{{ label }}</label>
    <input type="text" name="{{ name }}" id="{{ name }}" value="{{ value }}" class="form-control"></input>
{% endmacro %}

{% macro inputDate(name, label, value = '') %}
    <div class="mt-2">
        <label for="{{ name }}" class="form-label">{{ label }}</label>
        <input type="date" name="{{ name }}" id="{{ name }}" value="{{ value }}"></input>
    </div>
{% endmacro %}

{% macro inputNumber(name, label, value = '') %}
    <label for="{{ name }}" class="form-label">{{ label }}</label>
    <input type="number" name="{{ name }}" id="{{ name }}" value="{{ value }}"></input>
{% endmacro %}

{% macro genericInput(name, type, value = '', label = '', display = 'true', disabled = "") %}
    {% if type == "checkbox" %}
        {% set classFormCheck = "form-check" %}
    {% endif %}

    <div class="{{ classFormCheck }}">
        {% if display == "none" %}
            {% set displayNone = 'display:none;' %}
        {% else %}
            {% set tagLabel %}
                <label class="form-check-label" for="{{ name }}">{{label|raw}}</label>
            {% endset %}
        {% endif %}
        <input class="form-check-input" type="{{ type }}" id="{{ name }}" name="{{ name }}" value="{{ value }}" {{ disabled }} style="{{ displayNone }}"/>
        {{ tagLabel }}
    </div>
{% endmacro %}

{% macro selectWithValues(name, label, values, current_value = '') %}

    <label for='{{ name }}' class='form-label'>{{ label }}</label>
    <select name='{{ name }}' class="form-select">
        <option value=''>---</option>
        {% for b in values %}            
            {% if b.id == current_value.reservationitems_id %}
                <option selected value='{{ b.id }}'>{{ b.itemTypeName }}</option>
            {% else %}
                <option value='{{ b.id }}'>{{ b.itemTypeName }}</option>
            {% endif %}
        {% endfor %}
    </select>

{% endmacro %}

{% macro multiSelectWithValues(name, label, values, current_value = '') %}

    <label for="dropdown_trigger" class="form-label">{{label}}</label>
    <div class="dropdown_wrap">
        <button id="dropdown_trigger" class="dropdown_trigger d-flex justify-content-between align-items-center" type="button" onclick="toggleDropdown(event)">
            Selecione algum item
            <i class="fa-solid fa-caret-down" id="dropdown_icon"></i>
        </button>
        <div class="dropdown_box" id="dropdown_box" style="display: none;">
            <ul>
            {% for b in values %}       
                <li>     
                    <input type="checkbox" class="checkbox_dropdown" id="item_id_{{ b.id }}" name="item_id_{{ b.id }}" value="{{ b.id }}" />
                    <label for="item_id_{{ b.id }}">{{ b.itemTypeName }}</label>
                </li>
            {% endfor %} 
            </ul>
        </div>
    </div>

    <div class="mt-3 border d-flex flex-wrap rounded p-1" id="itemsView" style="min-height: 40px"></div>

    <script type="text/javascript">
        const dropdownBox = $("#dropdown_box");
        const dropdownTrigger = $(".dropdown_trigger");
        const dropdownChecks = $(".checkbox_dropdown");
        const valuesCurrent = {{current_value|json_encode|raw}};

        $(document).ready(() => {
            valuesCurrent.forEach((i) => {
                if ($("#item_id_"+i.id).val() == i.id) {
                    const itemId = i.id;
                    const itemName = $('label[for="item_id_' + itemId + '"]').text();

                    $("#item_id_"+i.id).prop("checked", true);
                    $('#itemsView').append('<span id="exib_it' + itemId + '" class="selected-item border rounded-pill px-2 py-1 m-1" data-value="' + itemId + '">'+ itemName +'</span>');
                }
            })
        })

        function toggleDropdown(event) {
            event.stopPropagation();
            if (dropdownBox.is(":hidden")) {  
                $("#dropdown_icon").removeClass('fa-caret-down');     
                $("#dropdown_icon").addClass('fa-caret-up');       
                dropdownBox.show();                
            } else {
                $("#dropdown_icon").removeClass('fa-caret-up');     
                $("#dropdown_icon").addClass('fa-caret-down');   
                dropdownBox.hide();
            }
        }

        dropdownChecks.on("change", (e) => {
            const itemId = $(e.target).val();

            if (e.target.checked) {
                const itemName = $('label[for="item_id_' + itemId + '"]').text();
                $('#itemsView').append('<span id="exib_it' + itemId + '" class="selected-item border rounded-pill px-2 py-1 m-1" data-value="' + itemId + '">'+ itemName +'</span>');
            } else {
                $('#exib_it' + itemId).remove();
            }
            
        });

        $(document).on("click", (event) => {
            if (!dropdownTrigger.is(event.target) && dropdownTrigger.has(event.target).length === 0 && !dropdownBox.is(event.target) && dropdownBox.has(event.target).length === 0) {
                if (!dropdownBox.is(":hidden")) {
                    $("#dropdown_icon").removeClass('fa-caret-up');     
                    $("#dropdown_icon").addClass('fa-caret-down');   
                    dropdownBox.hide();
                }
            }
        });
    </script>

    <style>
        .dropdown_trigger {
            border: 0.5px solid rgb(230, 230, 230);
            background-color: #ffff;
            border-radius: 6px;
            width: 100%;
            text-align: left;
            padding: 10px 20px;
            font-size: 0.9rem;                        
        }

        .dropdown_box {
            z-index: 2;
            position: absolute;     
            background-color: white;  
            border: 0.5px solid rgb(230, 230, 230);
            border-radius: 6px;
            font-size: 0.9rem;
            margin-top: 5px;
            width: 100%;
        }

        .dropdown_box ul {
            padding: 10px 10px 0 30px;
            list-style: none;      
        }

        .dropdown_box li {
            margin: 10px 0px;
        }

        .dropdown_wrap {
            position: relative;
        }
    
    </style>

{% endmacro %}

{% macro selectEntities(name, values) %}

    <label for="select_entities" class="form-label mt-2">Selecione o setor alvo</label>
    <select name="{{name}}" id="select_entities"></select>
    
    <script type="text/javascript">
        const val = {{values|json_encode|raw}};
        $(document).ready(() => {          
            $.get(
                "{{ path('/plugins/fillglpi/ajax/entidades.php') }}",
                {getAllEntities: "getAllEntities"},
                function(response) {
                    response.forEach((item) => {
                        let selected = '';

                        if (item.id === val) {
                            selected = 'selected';
                        }

                        $("#select_entities").append(`<option value="${item.id}" ${selected}>${item.name}</option>`);
                    })                    
                }
            )
        })        
    </script>

{% endmacro %}