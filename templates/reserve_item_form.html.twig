{% import "components/form/fields_macros.html.twig" as fields %}

<script type="text/javascript">
    $(document).ready(function() {

        function hasItemLikeParam(values) {
            let params = new URLSearchParams(window.location.search);
            for (let key of params.keys()) {
                if (key.startsWith('item')) {
                    values.push(params.get(key));
                }
            }
            return values.length > 0;
        }

        function initializeResources() {
            $(".row_resources").remove(); 
            let items = [];

            if (hasItemLikeParam(items)) {
                items.forEach(item => {                
                    getResources(item, $("input[name^='resa[begin]']").val(), $("select[name^='resa[_duration]']").find(":selected").val());
                });
            } else {
                $("#tr_quantity").hide().append(`<input type='text' name="type_reserve" value='unique' style='display: none' />`);
            }
        }

        let timeout;
        
        const debounce = function(func, wait) {
            return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        };

    const handleInputChange = debounce(initializeResources, 300);

    $("input[name^='resa[begin]']").on('change', handleInputChange);
    $("select[name^='resa[_duration]']").on('change', handleInputChange);

    function getResources(item, dateBegin, secondsEnd) {
        const dateEnd = calculateEndDate(dateBegin, secondsEnd);

        $.get("{{ path('/plugins/fillglpi/ajax/resources.php') }}", {item: item, dateBegin: dateBegin, dateEnd: dateEnd}, function(response) {
            console.log(response);
            if (response.resources.length > 0) {
                let tr = $('<tr>');
                let resources = $('<td colspan="2">');
                let resourcesTable = $('<table>').addClass("w-100");
                let moreOptionsContainer = $('<div>').addClass("my-2");

                response.resources.forEach((resource) => {
                    let form = "";        
                    let title_reserved = resource.availability === false ? "title='Recurso já reservado nesse horário'" : "";
                    let disabled = resource.availability === false ? "disabled" : "";
                    let icon_reserved = resource.availability === false ? '<i class="fa-regular fa-clock"></i>' : "";

                    if (!resource.type) {
                        form = `
                            <tr ${title_reserved}>
                                <td style="width: 1%">
                                    <input class="form-check-input" type="checkbox" id="${resource.id}_${resource.for}" name="resource_id_${resource.id}_${resource.for}" value="${resource.id}" ${disabled} />
                                </td>
                                <td>
                                    <label class="form-check-label d-inline" for="${resource.id}_${resource.for}">${resource.name}</label>
                                    ${icon_reserved}
                                </td>
                            </tr>
                        `;
                        resourcesTable.append(form);  
                    } else {
                        let moreOptionsTable = $('<table>').addClass("w-100");
                        let moreOptionsDiv = $('<div>').addClass("my-2");
                        moreOptionsDiv.append(`<h4>${resource.name}</h4>`);

                        resource.additionalOptions.forEach((opt) => {
                            moreOptionsTable.append(`                            
                                <tr>
                                    <td style="width: 1%">
                                        <input class="form-check-input" type="${resource.type}" id="${resource.id+"_"+opt.id}" name="resource_id_${resource.id}" value="${opt.id}" />
                                    </td>
                                    <td>
                                        <label class="form-check-label d-inline" for="${resource.id+"_"+opt.id}">${opt.name}</label>
                                    </td>
                                </tr>
                            `);                                                
                        });

                        if (resource.type === "quantity") {
                            moreOptionsTable.append(`<input type="number" name="people_quantity">`);
                        }

                        moreOptionsDiv.append(moreOptionsTable);
                        moreOptionsContainer.append(moreOptionsDiv);
                    }
                });

                resources.append(resourcesTable);
                resources.append(moreOptionsContainer);

                tr.append($('<td>').text('Recursos para '+response.Item));
                tr.append(resources);

                tr.addClass("row_resources");

                let submitButton = $(".tab_cadre").find('tr').eq(-1);

                if (submitButton.length > 0) {
                    submitButton.before(tr);
                } else {
                    $(".tab_cadre").append(tr);
                }
            }
        }, 'json').fail(function(jqXHR, textStatus, errorThrown) {
            console.error("Erro na requisição AJAX:", errorThrown);
            alert("Ocorreu um erro ao carregar os recursos. Por favor, tente novamente.");
        });
    }

    function calculateEndDate(startDate, durationInSeconds) {
        const durationInMilliseconds = durationInSeconds * 1000;
        const start = new Date(startDate);
        const endDate = new Date(start.getTime() + durationInMilliseconds);

        const year = endDate.getFullYear();
        const month = String(endDate.getMonth() + 1).padStart(2, '0');
        const day = String(endDate.getDate()).padStart(2, '0');
        const hours = String(endDate.getHours()).padStart(2, '0');
        const minutes = String(endDate.getMinutes()).padStart(2, '0');
        const seconds = String(endDate.getSeconds()).padStart(2, '0');

        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    }

    initializeResources();
});

function getRecoursesAvailability(resourceID) {
    $.get("{{ path('/plugins/fillglpi/ajax/resources.php') }}", {resourceCalendarID: resourceID}, function(response) {
        $("#calendar").empty();
        response.forEach((i) => {
            $("#calendar").append(`
                <tr>
                    <td class="p-2">${i.begin}</td>
                    <td class="p-2">${i.end}</td>
                </tr>
            `);
        });
    }).fail(function(jqXHR, textStatus, errorThrown) {
        console.error("Erro na requisição AJAX:", errorThrown);
        alert("Ocorreu um erro ao verificar a disponibilidade do recurso. Por favor, tente novamente.");
    });
}
</script>

