{% import "components/form/fields_macros.html.twig" as fields %}

<tr id="tr_quantity">
    <td>Quantidade de Pessoas</td>
    <td>
        {{ fields.dropdownNumberField(
            'people_quantity',
            '1',
            ''
        ) }}
    </td>
</tr>

<div class="modal fade" id="modalCalendar" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title">Modal title</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="calendar"></div>
      </div>      
    </div>
  </div>
</div>

<script type="text/javascript">
    $(document).ready(function() {

    function hasItemLikeParam(values) {
        let params = new URLSearchParams(window.location.search);
        for (let key of params.keys()) {
            if (key.startsWith('item')) {
                values.push(params.get(key));
            }
        }
        return values.length > 0;
    }

    function initializeResources() {
        $(".row_resources").remove(); 
        let items = [];

        if (hasItemLikeParam(items)) {
            items.forEach(item => {                
                getResources(item, $("input[name^='resa[begin]']").val(), $("select[name^='resa[_duration]']").find(":selected").val());
            });
        } else {
            $("#tr_quantity").hide().append(`<input type='text' name="type_reserve" value='unique' style='display: none' />`);
        }
    }

    //$("input[name^='resa[begin]']").on('change', function() {
    //    initializeResources();
    //});

    //$("select[name^='resa[_duration]']").on('change', function() { 
    //    initializeResources();
    //});

    let timeout;
    const debounce = function(func, wait) {
        return function(...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    };

    const handleInputChange = debounce(initializeResources, 300);

    $("input[name^='resa[begin]']").on('change', handleInputChange);
    $("select[name^='resa[_duration]']").on('change', handleInputChange);

    function getResources(item, dateBegin, secondsEnd) {
        const dateEnd = calculateEndDate(dateBegin, secondsEnd);

        $.get("{{ path('/plugins/fillglpi/ajax/resources.php') }}", {item: item, dateBegin: dateBegin, dateEnd: dateEnd}, function(response) {
            if (response.resources.length > 0) {
                let title = $('<td>').text('Recursos para ' + response.Item);
                let resources = $('<td>');
                let tr = $('<tr>');
                let resourcesTable = $('<table>');

                response.resources.forEach(resource => {
                    let disabled = "";
                    let title_reserved = "";
                    let icon_reserved = "";

                    if (resource.availability === false) {
                        disabled = "disabled";
                        title_reserved = "title='Recurso já reservado nesse horário'";
                        icon_reserved = '<i class="fa-regular fa-clock"></i>';
                        //calendar = `<a href="#" onclick="getRecoursesAvailability(${resource.id})" data-bs-toggle="modal" data-bs-target="#modalCalendar"><i class="fa-regular fa-calendar"></i></a>`; #}
                    }

                    let form = `
                        <tr ${title_reserved}>
                            <td style="width: 1%">
                                <input class="form-check-input" type="checkbox" id="${resource.id}_${resource.for}" name="resource_id_${resource.id}_${resource.for}" value="${resource.id}" ${disabled} />
                            </td>
                            <td>
                                <label class="form-check-label d-inline" for="${resource.id}_${resource.for}">${resource.name}</label>
                                ${icon_reserved}
                            </td>
                        </tr>
                    `;

                    resourcesTable.append(form);
                });

                resources.append(resourcesTable);
                tr.append(title);
                tr.append(resources);

                resourcesTable.addClass("w-100");
                tr.addClass("row_resources");

                let submitButton = $(".tab_cadre").find('tr').eq(-1);

                if (submitButton.length > 0) {
                    submitButton.before(tr);
                } else {
                    $(".tab_cadre").append(tr);
                }
            }
        }, 'json').fail(function(jqXHR, textStatus, errorThrown) {
            console.error("Erro na requisição AJAX:", errorThrown);
            alert("Ocorreu um erro ao carregar os recursos. Por favor, tente novamente.");
        });
    }

    function calculateEndDate(startDate, durationInSeconds) {
        const durationInMilliseconds = durationInSeconds * 1000;
        const start = new Date(startDate);
        const endDate = new Date(start.getTime() + durationInMilliseconds);

        const year = endDate.getFullYear();
        const month = String(endDate.getMonth() + 1).padStart(2, '0');
        const day = String(endDate.getDate()).padStart(2, '0');
        const hours = String(endDate.getHours()).padStart(2, '0');
        const minutes = String(endDate.getMinutes()).padStart(2, '0');
        const seconds = String(endDate.getSeconds()).padStart(2, '0');

        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    }

    initializeResources();
});

function getRecoursesAvailability(resourceID) {
    $.get("{{ path('/plugins/fillglpi/ajax/resources.php') }}", {resourceCalendarID: resourceID}, function(response) {
        $("#calendar").empty();
        response.forEach((i) => {
            $("#calendar").append(`
                <tr>
                    <td class="p-2">${i.begin}</td>
                    <td class="p-2">${i.end}</td>
                </tr>
            `);
        });
    }).fail(function(jqXHR, textStatus, errorThrown) {
        console.error("Erro na requisição AJAX:", errorThrown);
        alert("Ocorreu um erro ao verificar a disponibilidade do recurso. Por favor, tente novamente.");
    });
}
</script>

